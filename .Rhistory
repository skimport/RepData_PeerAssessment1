setwd("Dropbox/*job\ training/data\ science/5\ Reproducible\ research/week\ 2")
unzip("activity.zip")
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
head(activity)
activity
library(dplyr)
```{r message = FALSE}
library(dplyr)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
library(dplyr)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
str(activity)
activity$interval <- as.factor(activity$interval)
str(activity)
act_data <- activity %>% filter(!is.na(steps))
head(act_data)
str(act_data)
table(act_data$date)
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
act_data <-
activity %>% filter(!is.na(steps)) %>% group_by(date) %>%
summarize(totalSteps = sum(act_data$steps))
act_data
act_data <-
activity %>% filter(!is.na(steps)) %>% group_by(date) %>%
summarize(totalSteps = sum(act_data$steps, by = date))
act_data <-
activity %>% filter(!is.na(steps)) %>% group_by(date) %>%
summarize(totalSteps = sum(act_data$steps, by = act_data$date))
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
summarize(totalSteps = sum(act_data$steps, by = act_data$date))
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
summarize(act_data, totalSteps = sum(steps, by = date))
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
dailyTotal <- summarize(act_data, totalSteps = sum(steps, by = date))
dailyTotal
library(ggplot2)
library(dplyr)
library(ggplot2)
qplot(dailyTotal, data = totalStets)
qplot(dailyTotal, data = totalSteps)
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
dailyTotal <- summarize(act_data, steps = sum(steps, by = date))
dailyTotal
qplot(dailyTotal, data = steps)
qplot(steps, data = dailyTotal)
summary(dailyTotal)
qplot(steps, data = dailyTotal, binwidth = 1000)
qplot(steps, data = dailyTotal, binwidth = 1200)
plot(dailyTotal$steps)
hist(dailyTotal$steps)
mean <- mean(dailyTotal$steps)
median <- median(dailyTotal$steps)
mean
qplot(steps, data = dailyTotal, binwidth = 1200)
qplot(steps, data = dailyTotal, binwidth = 1000)
qplot(steps, data = dailyTotal, binwidth = 1500)
qplot(steps, data = dailyTotal, binwidth = 1000)
qplot(steps, data = dailyTotal, binwidth = 1000) + labs(x = "Steps per day", y = "Number of days")
qplot(steps, data = dailyTotal, binwidth = 1000) + labs(x = "Steps per day", y = "Number of days") + labs(title = "Histogram of number of steps per day")
qplot(steps, data = dailyTotal, binwidth = 1000) + labs(x = "Steps per day", y = "Number of days") + labs(title = "Histogram of number of steps per day") + theme(plot.title = element_text(hjust = 0.5))
table(dailyTotal)
table(act_data)
table(act_data$date)
averageActivity <- summarize(act_data, steps = mean(steps, by = interval))
averageActivity
act_data <- group_by(act_data, interval)
act_data <- group_by(act_data, interval)
averageActivity <- summarize(act_data, steps = mean(steps, by = interval))
averageActivity
g <- ggplot(averageActivity, aes(x = interval, y = steps)) + geom_line()
g
g <- ggplot(averageActivity) + geom_line()
g
g <- ggplot(averageActivity, aes(x = interval, y = steps))
g
with(averageActivity, plot(interval, steps))
with(averageActivity, plot(interval, steps, type = "l"))
noZero <- averageActivity %<% filter(steps != 0)
noZero <- averageActivity %>% filter(steps != 0)
noZero
with(noZero, plot(interval, steps, type = "l"))
rm(noZero)
rm(mean)
rm(median)
print(g)
names(g)
g$data
max(g$data$steps)
g + geom_line()
plot(averageActivity$interval, averageActivity$steps, type = "l")
ggplot(averageActivity, aes(x = interval, y = steps))
ggplot(averageActivity, aes(x = interval, y = steps)) + geom_point()
ggplot(averageActivity, aes(x = interval, y = steps)) + geom_point() + geom_line()
ggplot(averageActivity, aes(x = interval, y = steps)) + geom_point() + geom_line(group = 1)
ggplot(averageActivity, aes(x = interval, y = steps)) + geom_line(group = 1)
library(lubridate)
activity$interval
times <- hm(activity$interval)
times <- hm(as.character(activity$interval))
as.character(activity$interval)
strings <- as.character(activity$interval)
hm(strings)
hm("0000")
hm(1000)
as.Date(activity$interval, "%H%M")
as.Date(activity$interval, "%H%M")[30]
activity$interval
f <- function(x) {if (x < 100) x; 60 + function(x-100)}
f <- function(x) {if (x < 100) x; 60 + function(x - 100)}
f <- function(x) {if (x < 100) x; 60 + f(x - 100)}
f(10)
f <- function(x) {if (x >= 100) 60 + f(x - 100); x}
f(10)
f(100)
f(105)
f
f <- function(x) {if (x >= 100) 60 + f(x - 100); x}
f <- function(x) {
if (x >= 100) 60 + f(x - 100)
x}
f <- function(x) {
if (x >= 100) 60 + f(x - 100)
else x
}
f(10)
f(100)
f(105)
f <- function(x) {if (x >= 100) 60 + f(x - 100) else x}
activity$interval <- lapply(activity$interval, f)
rm(list = ls())
library(dplyr)
library(ggplot2)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
f <- function(x) {if (x >= 100) 60 + f(x - 100) else x}
activity$interval <- lapply(activity$interval, f)
activity$interval
f <- function(x) {if (x >= 100) 60 + f(x - 100) else x}
activity$interval <- sapply(activity$interval, f)
activity$interval
f <- function(x) {z = 0; while (x >= 100) {z = z + 60; x = x - 100}; z + x}
activity$interval <- sapply(activity$interval, f)
activity$interval
rm(activity,f)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
f <- function(x) {z = 0; while (x >= 100) {z = z + 60; x = x - 100}; z + x}
activity$interval <- sapply(activity$interval, f)
activity$interval
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
dailyTotal <- summarize(act_data, steps = sum(steps, by = date))
qplot(steps, data = dailyTotal, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
theme(plot.title = element_text(hjust = 0.5)) # centers the title
act_data <- group_by(act_data, interval)
averageActivity <- summarize(act_data, steps = mean(steps, by = interval))
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1)
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1) + scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440), labels = c("Mid", "3am", "6am", "9am", "noon", "3pm", "6pm", "9pm", "Mid"))
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1) + scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440), labels = c("Midnight", "3am", "6am", "9am", "Noon", "3pm", "6pm", "9pm", ""))
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1) + scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440), labels = c("Midnight", "3am", "6am", "9am", "Noon", "3pm", "6pm", "9pm", "Midnight"))
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1) + scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440), labels = c("Midnight", "3am", "6am", "9am", "Noon", "3pm", "6pm", "9pm", "Midnight")) + labs(x = "Time (5 minute intervals)", y = "Average number of steps", title = "Average number of steps per 5 minute interval") + theme(plot.title = element_text(hjust = 0.5))
act_data <- group_by(act_data, interval)
averageActivity <- summarize(act_data, steps = mean(steps, by = interval))
maxAverage <- max(averageActivity$steps)
maxInterval <- averageActivity$interval[which.max(averageActivity$steps)]
515/60
floor(515/60)
515 - 60*floor(515/60)
maxAverage <- max(averageActivity$steps)
maxInterval <- averageActivity$interval[which.max(averageActivity$steps)]
intHour <- floor(maxInterval/60)
intMin <- maxInterval - 60*intHour
paste(c(intHour, intMin), sep = ":")
paste(intHour, intMin, sep = ":")
maxAverage <- max(averageActivity$steps)
maxInterval <- averageActivity$interval[which.max(averageActivity$steps)]
intHour <- floor(maxInterval/60)
intMin <- maxInterval - 60*intHour
if (intMin < 10) {
intMin <- paste(0,intMin, sep = "")
}
intMin <- 0
if (intMin < 10) {
intMin <- paste(0,intMin, sep = "")
}
paste(intHour, intMin, sep = ":")
nrows(activity)
dim(activity)
dim(activity)[1]
numMissing <- sum(is.na(activity$steps))
?mutate
activityImpute <- activity
averageActivity
activityImpute <- activityImpute %>%
mutate(steps = replace(steps, is.na(steps),
averageActivity[averageActivity$intervals == intervals]$steps))
activityImpute <- activityImpute %>%
mutate(steps = replace(steps, is.na(steps),
averageActivity[averageActivity$interval == interval]$steps))
activityImpute <- activityImpute %>%
mutate(steps = replace(steps, is.na(steps),
averageActivity[averageActivity$interval == interval, ]$steps))
activityImpute$steps[is.na(activityImpute$steps)] <-
averageActivity[averageActivity$interval == activityImpute$interval, ]$steps
activityImpute <- activityImpute %>%
rowwise() %>% mutate(intAverage = grep(interval, averageActivity))
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[grep(interval, averageActivity)])
activityImpute
activityImpute <- activity
activityImpute
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[grep(interval, averageActivity)])
averageActivity$steps[grep(interval, averageActivity)]
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[grep(interval,
averageActivity$interval)])
activityImpute
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[grep(activityImpute$interval,
averageActivity$interval)])
grep(0,averageActivity$interval)
grep(0,averageActivity$interval, fixed = TRUE)
grep(paste("^",0,"$", sep = ""),averageActivity$interval, fixed = TRUE)
grep(paste(,0,"$", sep = ""),averageActivity$interval, fixed = TRUE)
grep(paste(0,"$", sep = ""),averageActivity$interval, fixed = TRUE)
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(activityImpute$interval ==
averageActivity$interval)])
which(0, averageActivity$interval)
which(0 == averageActivity$interval)
averageActivity$steps[1]
averageActivity$steps[which(0 == averageActivity$interval)]
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)])
activityImpute
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(is.na(steps),intAverage))
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps),intAverage))
head(activityImpute)
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps), intAverage)) %>% group_by(date)
totalsImpute <- summarize(activityImpute, steps = sum(steps, by = date))
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps), intAverage)) %>% group_by(date)
totalsImpute <- summarize(activityImpute, steps = sum(steps, by = date))
activityImpute <- activity
activityImpute <- activityImpute %>%
#    rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps), intAverage)) %>% group_by(date)
totalsImpute <- summarize(activityImpute, steps = sum(steps, by = date))
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps), intAverage)) %>% group_by(date)
totalsImpute <- summarize(activityImpute, steps = sum(steps, by = date))
qplot(steps, data = totalsImpute, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
labs(subtitle = "(NA replaced with average of interval") +
theme(plot.title = element_text(hjust = 0.5)) # centers the title
qplot(steps, data = totalsImpute, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
labs(subtitle = "(NA replaced with average of interval)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) # centers the titles
qplot(steps, data = totalsImpute, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
labs(subtitle = "(NA replaced with average of interval)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) # centers the titles
qplot(steps, data = totalsImpute, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
labs(subtitle = "(NA replaced with average of interval)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) # centers the titles
q()
today <- Sys.Date()
names(today)
str(today)
summary(today)
day(today)
weekdays(today)
weekdays()
weekdays
library(dplyr)
library(ggplot2)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
f <- function(x) {z = 0; while (x >= 100) {z = z + 60; x = x - 100}; z + x}
activity$interval <- sapply(activity$interval, f)
act_data <- activity %>% filter(!is.na(steps)) %>% group_by(date)
dailyTotal <- summarize(act_data, steps = sum(steps, by = date))
qplot(steps, data = dailyTotal, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
theme(plot.title = element_text(hjust = 0.5)) # centers the title
act_data <- group_by(act_data, interval)
averageActivity <- summarize(act_data, steps = mean(steps, by = interval))
ggplot(averageActivity, aes(interval, steps)) + geom_line(group = 1) +
scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440),
labels = c("Midnight", "3am", "6am", "9am", "Noon",
"3pm", "6pm", "9pm", "Midnight")) +
labs(x = "Time (5 minute intervals)", y = "Average number of steps",
title = "Average number of steps per 5 minute interval") +
theme(plot.title = element_text(hjust = 0.5)) # to center the title
maxAverage <- max(averageActivity$steps)
maxInterval <- averageActivity$interval[which.max(averageActivity$steps)]
intHour <- floor(maxInterval/60)
intMin <- maxInterval - 60*intHour
# make time output look right
if (intMin < 10) {intMin <- paste(0,intMin, sep = "")}
numMissing <- sum(is.na(activity$steps))
activityImpute <- activity
activityImpute <- activityImpute %>%
rowwise() %>%
mutate(intAverage = averageActivity$steps[which(interval ==
averageActivity$interval)]) %>%
mutate(steps = replace(steps, is.na(steps), intAverage)) %>% group_by(date)
totalsImpute <- summarize(activityImpute, steps = sum(steps, by = date))
qplot(steps, data = totalsImpute, binwidth = 1000) +
labs(x = "Steps per day", y = "Number of days") +
labs(title = "Histogram of number of steps per day") +
labs(subtitle = "(NA replaced with average of interval)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) # centers the titles
weekdayNames <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dayActivity <- activityImpute %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
names(activityImpute)
str(activityImpute)
weekdayNames <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dayActivity$date <- as.Date(dayActivity$date)
weekdayNames <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activityImpute$date <- as.Date(activityImpute$date)
dayActivity <- activityImpute %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
dayActivity
table(dayActivity$dayType)
weekdayNames <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activityImpute$date <- as.Date(activityImpute$date)
dayActivity <- activityImpute %>%
transmute(-intAverage) %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
dayActivity
dayActivity <- activityImpute %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
dayActivity
str(dayActivity)
dayActivity <- activityImpute %>%
select(-intActivity) %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
dayActivity <- activityImpute %>%
select(-intAverage) %>%
mutate(dayType = factor(weekdays(date) %in% weekdayNames,
levels = c(FALSE, TRUE),
labels = c("Weekend", "Weekday")))
dayActivity
dayCompare <- dayActivity %>% group_by(dayType, interval) %>%
summarize(steps = mean(steps))
dayCompare
ggplot(dayCompare, aes(interval, steps)) +
geom_line(group = 1) + facet_grid(dayType ~ .)
g <- ggplot(dayCompare, aes(interval, steps)) +
geom_line(group = 1) + facet_grid(dayType ~ .)
g
g <- ggplot(dayCompare, aes(interval, steps)) +
geom_line(group = 1) + facet_grid(dayType ~ .) +
scale_x_continuous(breaks = c(0,180, 360, 540, 720, 900, 1080, 1260, 1440),
labels = c("Midnight", "3am", "6am", "9am", "Noon",
"3pm", "6pm", "9pm", "Midnight")) +
labs(x = "Time (5 minute intervals)", y = "Average number of steps",
title = "Average number of steps per 5 minute interval") +
theme(plot.title = element_text(hjust = 0.5)) # to center the title
g
q()
